//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/msys64/home/Kenne/temp2/Generated-CSharp/X.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class XLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		QUALIFIED_ATTR=1, ATTR=2, MYID=3, DOT=4, LP=5, WS=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"QUALIFIED_ATTR", "ATTR", "MYID", "DOT", "LP", "WS", "ID"
	};


	public XLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public XLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'.'", "'('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "QUALIFIED_ATTR", "ATTR", "MYID", "DOT", "LP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "X.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0 : return QUALIFIED_ATTR_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool QUALIFIED_ATTR_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.InputStream.LA(1)==' ';
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,6,50,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		1,0,1,0,1,0,1,0,1,0,5,0,21,8,0,10,0,12,0,24,9,0,1,0,1,0,1,1,1,1,1,1,1,
		2,1,2,1,3,1,3,1,4,1,4,1,5,4,5,38,8,5,11,5,12,5,39,1,5,1,5,1,6,1,6,5,6,
		46,8,6,10,6,12,6,49,9,6,0,0,7,1,1,3,2,5,3,7,4,9,5,11,6,13,0,1,0,3,3,0,
		65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,51,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,1,15,1,0,0,0,3,27,1,0,0,0,5,30,1,0,0,0,7,32,1,0,0,0,9,34,1,0,0,0,11,
		37,1,0,0,0,13,43,1,0,0,0,15,16,5,36,0,0,16,17,3,13,6,0,17,18,5,46,0,0,
		18,22,7,0,0,0,19,21,7,1,0,0,20,19,1,0,0,0,21,24,1,0,0,0,22,20,1,0,0,0,
		22,23,1,0,0,0,23,25,1,0,0,0,24,22,1,0,0,0,25,26,4,0,0,0,26,2,1,0,0,0,27,
		28,5,36,0,0,28,29,3,13,6,0,29,4,1,0,0,0,30,31,3,13,6,0,31,6,1,0,0,0,32,
		33,5,46,0,0,33,8,1,0,0,0,34,35,5,40,0,0,35,10,1,0,0,0,36,38,7,2,0,0,37,
		36,1,0,0,0,38,39,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,
		42,6,5,0,0,42,12,1,0,0,0,43,47,7,0,0,0,44,46,7,1,0,0,45,44,1,0,0,0,46,
		49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,14,1,0,0,0,49,47,1,0,0,0,4,0,
		22,39,47,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
